// Oyun durumu
let playerName = '';
let initialGameState = null;
let currentLevel = 1;
let maxLevel = 10;

// P - Arabanƒ±n konumu
// B - Pilin konumu
// T - √á√∂p√ºn konumu

const levels = {
    1: {
        name: "Kolay Seviye - √ñƒürenme",
        description: "X'in ilk g√∂revi √ßok kolay! Sadece 1 √ß√∂p ve 1 pil var. Haydi ba≈ülayalƒ±m!",
        grid: [
            "-----",
            "-----",
            "-BP-T",
            "-----",
            "-----"
        ]
    },
    2: {
        name: "Kolay Seviye - Alƒ±≈ütƒ±rma",
        description: "X harika gidiyor! ≈ûimdi 2 √ß√∂p ve 1 pil var. X yapabilir!",
        grid: [
            "-----",
            "-B---",
            "--P--",
            "--T--",
            "-----"
        ]
    },
    3: {
        name: "Orta Seviye - Ba≈ülangƒ±√ß",
        description: "X i√ßin zorluk biraz artƒ±yor! 3 √ß√∂p ve 1 pil var.",
        grid: [
            "B---T",
            "-----",
            "-T-T-",
            "-----",
            "--P--"
        ]
    },
    4: {
        name: "Orta Seviye - √áapraz Hareket",
        description: "X'in √ßapraz hareketleri kullanmasƒ± gereken bir seviye! 3 √ß√∂p ve 2 pil var.",
        grid: [
            "P---B",
            "-----",
            "--T--",
            "-T---",
            "B---T"
        ]
    },
    5: {
        name: "Orta Seviye - Strateji",
        description: "X pilleri akƒ±llƒ±ca kullanmalƒ±! 4 √ß√∂p ve 2 pil var.",
        grid: [
            "--P--",
            "-T-T-",
            "B---B",
            "-T-T-",
            "-----"
        ]
    },
    6: {
        name: "Zor Seviye - Planlama",
        description: "X iyi bir planlama yapmalƒ±! 4 √ß√∂p ve 2 pil var, ama konumlarƒ± zorlu.",
        grid: [
            "P----",
            "--T--",
            "-T-T-",
            "--T--",
            "B---B"
        ]
    },
    7: {
        name: "Zor Seviye - Labirent",
        description: "X i√ßin √ß√∂pler labirent gibi dizilmi≈ü! 5 √ß√∂p ve 2 pil var.",
        grid: [
            "--P--",
            "-T-T-",
            "B-T-B",
            "-T-T-",
            "-----"
        ]
    },
    8: {
        name: "Uzman Seviye - Verimlilik",
        description: "X her hareketi dikkatli planlamalƒ±! 5 √ß√∂p ve 2 pil, minimum hareketle toplanmalƒ±.",
        grid: [
            "P----",
            "-T-T-",
            "--B-T",
            "-T---",
            "--T-B"
        ]
    },
    9: {
        name: "Uzman Seviye - Maksimum Zorluk",
        description: "X i√ßin en zor seviyelerden biri! 6 √ß√∂p ve 2 pil var.",
        grid: [
            "B---T",
            "-T-T-",
            "--P--",
            "-T-T-",
            "T---B"
        ]
    },
    10: {
        name: "Final Seviye - Ustala≈üma",
        description: "X i√ßin final seviyesi! 6 √ß√∂p ve 2 pil. X'in t√ºm √∂ƒürendiklerini kullanma zamanƒ±!",
        grid: [
            "P-T-B",
            "--T--",
            "T-T-T",
            "--T--",
            "B-T--"
        ]
    }
};

let gameState = {
    playerPosition: { x: 0, y: 0 },
    batteryCount: 3,
    trashCount: 0,
    batteries: [],
    trashItems: [],
    gridSize: 5
};

// Hareket ge√ßmi≈üi
let moveHistory = [];
let isPlaying = false;

// Hareket sembolleri
const moveSymbols = {
    'up': '‚Üë',
    'down': '‚Üì',
    'left': '‚Üê',
    'right': '‚Üí',
    'upLeft': '‚Üñ',
    'upRight': '‚Üó',
    'downLeft': '‚Üô',
    'downRight': '‚Üò'
};

// Grid tabanlƒ± level'ƒ± koordinat bazlƒ± verilere d√∂n√º≈üt√ºrme
function parseLevel(level) {
    const player = { x: 0, y: 0 };
    const batteries = [];
    const trashItems = [];
    
    for (let y = 0; y < level.grid.length; y++) {
        const row = level.grid[y];
        for (let x = 0; x < row.length; x++) {
            const cell = row.charAt(x);
            
            if (cell === 'P') {
                player.x = x;
                player.y = y;
            } else if (cell === 'B') {
                batteries.push({ x, y });
            } else if (cell === 'T') {
                trashItems.push({ x, y });
            }
        }
    }
    
    return {
        player,
        batteries,
        trashItems
    };
}

// Grid olu≈üturma
function createGrid() {
    const grid = document.querySelector('.grid');
    grid.innerHTML = '';
    
    for (let y = 0; y < gameState.gridSize; y++) {
        for (let x = 0; x < gameState.gridSize; x++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            
            // Oyuncu pozisyonu
            if (x === gameState.playerPosition.x && y === gameState.playerPosition.y) {
                cell.innerHTML = 'üöó';
                cell.classList.add('player');
            }
            
            // Pil pozisyonlarƒ±
            if (isBatteryAt(x, y)) {
                cell.innerHTML = 'üîã';
                cell.classList.add('battery');
            }
            
            // √á√∂p pozisyonlarƒ±
            if (isTrashAt(x, y)) {
                cell.innerHTML = 'üóëÔ∏è';
                cell.classList.add('trash');
            }
            
            grid.appendChild(cell);
        }
    }
    updateCounters();
}

// Seviyeyi y√ºkle
function loadLevel(levelNumber) {
    const level = levels[levelNumber];
    if (!level) return;

    const parsedLevel = parseLevel(level);
    
    gameState = {
        playerPosition: { ...parsedLevel.player },
        batteryCount: 3,
        trashCount: 0,
        batteries: [...parsedLevel.batteries],
        trashItems: [...parsedLevel.trashItems],
        gridSize: 5
    };

    // Seviye bilgisini g√∂ster
    showLevelInfo(level);
    moveHistory = [];
    document.getElementById('moves-list').innerHTML = '';
    createGrid();
}

// Seviye bilgisini g√∂ster
function showLevelInfo(level) {
    const container = document.querySelector('.container');
    const existingInfo = container.querySelector('.level-info');
    if (existingInfo) {
        existingInfo.remove();
    }

    // Level a√ßƒ±klamasƒ±nƒ± ki≈üiselle≈ütir
    const personalizedDescription = level.description.replace(/X/g, playerName);

    const levelInfo = document.createElement('div');
    levelInfo.className = 'level-info';
    levelInfo.innerHTML = `
        <h2>Seviye ${currentLevel}: ${level.name}</h2>
        <p>${personalizedDescription}</p>
    `;

    container.insertBefore(levelInfo, container.querySelector('.game-info'));
}

// Pozisyon kontrolleri
function isBatteryAt(x, y) {
    return gameState.batteries.some(battery => battery.x === x && battery.y === y);
}

function isTrashAt(x, y) {
    return gameState.trashItems.some(trash => trash.x === x && trash.y === y);
}

// Hareket fonksiyonu
function move(direction) {
    if (gameState.batteryCount <= 0) {
        alert('Pil bitti! Seviyeyi tekrar deneyin.');
        loadLevel(currentLevel);
        return false;
    }

    const newPosition = { ...gameState.playerPosition };
    let isValidMove = true;
    
    switch (direction) {
        case 'up':
            if (newPosition.y > 0) newPosition.y--;
            else isValidMove = false;
            break;
        case 'down':
            if (newPosition.y < gameState.gridSize - 1) newPosition.y++;
            else isValidMove = false;
            break;
        case 'left':
            if (newPosition.x > 0) newPosition.x--;
            else isValidMove = false;
            break;
        case 'right':
            if (newPosition.x < gameState.gridSize - 1) newPosition.x++;
            else isValidMove = false;
            break;
        case 'upLeft':
            if (newPosition.y > 0 && newPosition.x > 0) {
                newPosition.y--;
                newPosition.x--;
            } else isValidMove = false;
            break;
        case 'upRight':
            if (newPosition.y > 0 && newPosition.x < gameState.gridSize - 1) {
                newPosition.y--;
                newPosition.x++;
            } else isValidMove = false;
            break;
        case 'downLeft':
            if (newPosition.y < gameState.gridSize - 1 && newPosition.x > 0) {
                newPosition.y++;
                newPosition.x--;
            } else isValidMove = false;
            break;
        case 'downRight':
            if (newPosition.y < gameState.gridSize - 1 && newPosition.x < gameState.gridSize - 1) {
                newPosition.y++;
                newPosition.x++;
            } else isValidMove = false;
            break;
    }

    if (!isValidMove) {
        alert('Alanƒ±n dƒ±≈üƒ±na √ßƒ±ktƒ±nƒ±z! Seviyeyi tekrar deneyin.');
        loadLevel(currentLevel);
        return false;
    }

    if (newPosition.x !== gameState.playerPosition.x || newPosition.y !== gameState.playerPosition.y) {
        gameState.batteryCount--;
        
        const batteryIndex = gameState.batteries.findIndex(
            battery => battery.x === newPosition.x && battery.y === newPosition.y
        );
        if (batteryIndex !== -1) {
            gameState.batteryCount += 3;
            gameState.batteries.splice(batteryIndex, 1);
        }
        
        const trashIndex = gameState.trashItems.findIndex(
            trash => trash.x === newPosition.x && trash.y === newPosition.y
        );
        if (trashIndex !== -1) {
            gameState.trashCount++;
            gameState.trashItems.splice(trashIndex, 1);
            
            if (gameState.trashItems.length === 0) {
                checkWin();
            }
        }
        
        gameState.playerPosition = newPosition;
        createGrid();
        return true;
    }
    return false;
}

// Oyunu kazanma kontrol√º
function checkWin() {
    if (gameState.trashItems.length === 0) {
        return true;
    }
    return false;
}

// Hareket planlama fonksiyonlarƒ±
function addMove(direction) {
    if (isPlaying) return;
    moveHistory.push(direction);
    updateMovesList();
}

function undoLastMove() {
    if (isPlaying || moveHistory.length === 0) return;
    moveHistory.pop();
    updateMovesList();
}

// Hareket listesini g√ºncelle
function updateMovesList() {
    const movesList = document.getElementById('moves-list');
    movesList.innerHTML = '';
    
    moveHistory.forEach((direction, index) => {
        const moveItem = document.createElement('div');
        moveItem.className = 'move-item';
        moveItem.textContent = `${index + 1}. ${moveSymbols[direction]}`;
        movesList.appendChild(moveItem);
    });
    
    movesList.scrollTop = movesList.scrollHeight;
}

// Kaydedilen hareketleri oynat
async function playRecordedMoves() {
    if (isPlaying || moveHistory.length === 0) return;
    
    isPlaying = true;
    // Hareket butonlarƒ±nƒ± devre dƒ±≈üƒ± bƒ±rak
    disableMovementControls(true);
    
    // Oyunu ba≈ülangƒ±√ß durumuna getir
    gameState = JSON.parse(JSON.stringify(initialGameState));
    createGrid();
    
    let allTrashCollected = false;
    
    for (const direction of moveHistory) {
        await new Promise(resolve => setTimeout(resolve, 500));
        if (!move(direction)) {
            // Hareket ba≈üarƒ±sƒ±z olursa veya pil bittiyse
            handleLevelFailure();
            return;
        }
        // Her hareket sonrasƒ± kazanma durumunu kontrol et
        if (checkWin()) {
            allTrashCollected = true;
        }
    }
    
    // T√ºm hareketler tamamlandƒ±ktan sonra ba≈üarƒ± kontrol√º
    if (allTrashCollected) {
        setTimeout(() => {
            const message = currentLevel === maxLevel ? 
                'Tebrikler! T√ºm seviyeleri tamamladƒ±nƒ±z! üéâ' :
                `Tebrikler! ${currentLevel}. seviyeyi tamamladƒ±nƒ±z! Bir sonraki seviyeye ge√ßiliyor...`;
            
            alert(message);
            
            if (currentLevel < maxLevel) {
                currentLevel++;
                loadLevel(currentLevel);
            } else {
                resetGame();
            }
        }, 500);
    } else {
        handleLevelFailure();
    }
    
    isPlaying = false;
    disableMovementControls(false);
}

// Hareket kontrollerini etkinle≈ütir/devre dƒ±≈üƒ± bƒ±rak
function disableMovementControls(disable) {
    const planButtons = document.querySelectorAll('.plan-btn');
    const undoButton = document.querySelector('.undo-btn');
    
    planButtons.forEach(button => {
        button.disabled = disable;
        if (disable) {
            button.style.opacity = '0.5';
            button.style.cursor = 'not-allowed';
        } else {
            button.style.opacity = '1';
            button.style.cursor = 'pointer';
        }
    });
    
    if (undoButton) {
        undoButton.disabled = disable;
        undoButton.style.opacity = disable ? '0.5' : '1';
        undoButton.style.cursor = disable ? 'not-allowed' : 'pointer';
    }
}

// Seviye ba≈üarƒ±sƒ±z olduƒüunda
function handleLevelFailure() {
    setTimeout(() => {
        alert('Seviyeyi tamamlayamadƒ±nƒ±z! Tekrar deneyin.');
        isPlaying = false;
        loadLevel(currentLevel); // Mevcut seviyeyi yeniden ba≈ülat
        disableMovementControls(false);
    }, 500);
}

// Saya√ßlarƒ± g√ºncelle
function updateCounters() {
    document.getElementById('battery-count').textContent = gameState.batteryCount;
    document.getElementById('trash-count').textContent = gameState.trashCount;
}

// ƒ∞sim giri≈üini kontrol et ve hikayeyi g√∂ster
function submitName() {
    const nameInput = document.getElementById('initial-player-name');
    const name = nameInput.value.trim();
    
    if (name === '') {
        alert('L√ºtfen isminizi giriniz!');
        return;
    }

    // ƒ∞sim uzunluƒüu kontrol√º
    if (name.length < 3) {
        alert('ƒ∞sminiz √ßok kƒ±sa! L√ºtfen en az 3 karakter kullanƒ±n.');
        return;
    }

    if (name.length > 15) {
        alert('ƒ∞sminiz √ßok uzun! L√ºtfen isminizi kƒ±saltƒ±p tekrar deneyiniz.');
        return;
    }
    
    playerName = name;
    
    // ƒ∞sim giri≈ü ekranƒ±nƒ± gizle
    document.getElementById('name-entry').style.display = 'none';
    
    // Hikaye metnini g√ºncelle
    updateStoryText();
    
    // Hikaye ekranƒ±nƒ± g√∂ster
    document.getElementById('intro-story').style.display = 'flex';
}

// Hikaye metnini g√ºncelle
function updateStoryText() {
    // Ba≈ülƒ±ƒüƒ± g√ºncelle
    document.getElementById('story-title').textContent = `${playerName}'in √áevre Dostu Macerasƒ±`;
    
    // Paragraflarƒ± g√ºncelle
    document.getElementById('story-p1').textContent = 
        `Bir zamanlar, doƒüayƒ± √ßok seven ${playerName} adƒ±nda bir √ßocuk vardƒ±. ${playerName}, ya≈üadƒ±ƒüƒ± d√ºnyayƒ± korumak i√ßin her zaman en iyi yollarƒ± arƒ±yordu. Ama bir sorun vardƒ±! Havanƒ±n i√ßindeki k√∂t√º CO2 gazlarƒ± artmƒ±≈ütƒ± ve d√ºnya biraz √ºzg√ºnd√º. üòî`;
    
    document.getElementById('story-p2').textContent = 
        `${playerName}, bu sorunu √ß√∂zmek i√ßin sihirli elektrikli arabasƒ±na atladƒ±! üöó‚ö° Ama dikkat etmesi gereken bir ≈üey vardƒ±: Arabanƒ±n pili 3 taneydi! Her hareket ettiƒüinde pili bir tane azalacaktƒ±. Ama neyse ki yol boyunca alabileceƒüi 3 pil bulunuyor ve yoluna devam ediyor! Ayrƒ±ca, d√ºnyayƒ± daha temiz yapmak i√ßin yerdeki √ß√∂pleri de toplamasƒ± gerekiyordu. üåç‚ú®`;
    
    document.getElementById('story-p3').textContent = 
        `≈ûimdi ${playerName}'in macerasƒ±na sen de katƒ±lmaya hazƒ±r mƒ±sƒ±n? Ona ileri, geri, saƒüa ve sola gitmesini s√∂yleyerek hem √ß√∂pleri toplayabilir hem de pilleri alarak yoluna devam etmesini saƒülayabilirsin. Ama dikkatli ol! Pil bitmeden g√∂revi tamamlaman gerekiyor!`;
    
    document.getElementById('story-p4').textContent = 
        `Hadi, ${playerName}'e yardƒ±m edelim ve d√ºnyayƒ± daha temiz bir yer yapalƒ±m! üåøüöÄ`;
}

// Oyun ba≈ülangƒ±√ß fonksiyonu
function startGame() {
    if (moveHistory.length === 0) {
        alert('√ñnce hareketleri planlamalƒ±sƒ±nƒ±z!');
        return;
    }

    // Ba≈ülangƒ±√ß durumunu kaydet
    initialGameState = JSON.parse(JSON.stringify(gameState));
    
    // Hareketleri oynat
    playRecordedMoves();
}

// Hikayeden oyuna ge√ß
function startFromStory() {
    // Hikaye ekranƒ±nƒ± gizle
    document.getElementById('intro-story').style.display = 'none';
    
    // Oyun container'ƒ±nƒ± g√∂ster
    document.querySelector('.game-container').style.display = 'flex';
    
    // Oyun ba≈ülƒ±ƒüƒ±nƒ± g√ºncelle
    document.querySelector('.container h1').textContent = `${playerName}'in √áevre Dostu Macerasƒ±`;
    
    // Oyun aray√ºz√ºn√º g√∂ster
    document.querySelector('.game-info').style.display = 'block';
    
    // ƒ∞lk seviyeyi y√ºkle
    loadLevel(currentLevel);
}

// Oyunu sƒ±fƒ±rla
function resetGame() {
    currentLevel = 1;
    
    // ƒ∞sim giri≈ü ekranƒ±nƒ± g√∂ster
    document.getElementById('name-entry').style.display = 'flex';
    
    // Hikaye ve oyun ekranlarƒ±nƒ± gizle
    document.getElementById('intro-story').style.display = 'none';
    document.querySelector('.game-container').style.display = 'none';
    
    // ƒ∞sim giri≈ü alanƒ±nƒ± temizle
    document.getElementById('initial-player-name').value = '';
    
    // Ba≈ülƒ±ƒüƒ± sƒ±fƒ±rla
    document.querySelector('h1').textContent = `X'in √áevre Dostu Macerasƒ±`;
    
    // Oyun durumunu sƒ±fƒ±rla
    playerName = '';
    moveHistory = [];
    document.getElementById('moves-list').innerHTML = '';
    
    // Grid'i temizle
    const grid = document.querySelector('.grid');
    grid.innerHTML = '';
}

// CSS i√ßin stil
const style = document.createElement('style');
style.textContent = `
.level-info {
    background-color: #e8f5e9;
    padding: 1rem;
    border-radius: 8px;
    margin-bottom: 1.5rem;
}

.level-info h2 {
    color: #00796b;
    margin-bottom: 0.5rem;
}

.level-info p {
    color: #2e7d32;
}

#name-input-container {
    margin: 20px 0;
    text-align: center;
}

#player-name {
    padding: 8px;
    font-size: 16px;
    border: 2px solid #00796b;
    border-radius: 4px;
    margin: 0 10px;
}

.name-submit-btn {
    padding: 8px 20px;
    font-size: 16px;
    background-color: #00796b;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.name-submit-btn:hover {
    background-color: #005b4f;
}
`;
document.head.appendChild(style);

// Oyunu ba≈ülat
loadLevel(currentLevel); 